---
import { getCollection } from 'astro:content';
import Layout from '../../layouts/BaseLayout.astro';
import '../../styles/blog.css';

// 1. Generate a new path for every collection entry
export async function getStaticPaths() {
  const blogEntries = await getCollection('blog');
  return blogEntries
    .map(entry => ({
      params: { 
        slug: entry.slug,
      }, 
      props: { 
        entry, 
      },
    }));
}

const { entry } = Astro.props;
const { Content } = await entry.render();


function formatDate(d: Date): string {
  const year = d.getFullYear();
  const month = String(d.getMonth()).padStart(2,'0');
  const day = String(d.getDate()).padStart(2,'0');
  return `${year}-${month}-${day}`;
}

---
<Layout activeTab="blog">
  <title slot="head">
    { entry.data.pageTitie || entry.data.title } | Austin's Blog
  </title>

  <div 
    class="
      max-w-lg
      md:max-w-2xl
      mx-auto 
      space-y-2 
      mb-4
      px-6
      text-slate-600
      dark:text-slate-400
    "
  >
    <a href="/blog" class="text-sm font-medium flex items-center space-x-2 -ml-[1px]">
      <svg xmlns="http://www.w3.org/2000/svg" fill="none" viewBox="0 0 24 24" stroke-width="1.5" stroke="currentColor" class="w-6 h-6">
        <path stroke-linecap="round" stroke-linejoin="round" d="M19.5 12h-15m0 0l6.75 6.75M4.5 12l6.75-6.75" />
      </svg>      
      <span>
        Back
      </span>
    </a>
  </div>
  
  <article 
    class="
      max-w-lg
      md:max-w-2xl
      mx-auto 
      space-y-8
      mb-8
      px-6
    "
  >
    <div class="space-y-1">
      <h1 class="text-4xl font-medium">
        { entry.data.title }
      </h1>
      { entry.data.subtitle && (
        <h2 class="text-lg font-medium text-slate-600 dark:text-slate-300">
          { entry.data.subtitle }
        </h2>
      )}
      <p class="text-sm font-medium pt-2 text-slate-800 dark:text-slate-200">
        Written by Austin Poor
      </p>
      <p class="text-sm font-medium text-slate-800 dark:text-slate-200">
        Published { formatDate(entry.data.publishDate) }
        { entry.data.updateDate && (
          <>
            { " | " } Updated { formatDate(entry.data.updateDate) }
          </>
        )}
      </p>
    </div>

    <div class="pt-0 pb-8">
      <figure class="text-sm tracking-tight">
        <img 
          class="w-full mx-auto mb-2"
          src={entry.data.image.src} 
          alt={entry.data.image.alt} 
        />
        {entry.data.image.caption && entry.data.image.captionLink && (
          <figcaption class="text-center">
            <a href={entry.data.image.captionLink}>
              { entry.data.image.caption }
            </a>
          </figcaption>
        )}
        {entry.data.image.caption && !entry.data.image.captionLink && (
          <figcaption class="text-center">
            { entry.data.image.caption }
          </figcaption>
        )}
      </figure>
    </div>

    <Content />

  </article>

</Layout>
