---
---

<search-modal open="true" class="fixed left-0 top-0 right-0 bottom-0 items-center justify-center backdrop-blur-[2px] text-lg hidden">
    <div class="pb-12 max-w-xl w-full">
        <div class="search-modal-box bg-zinc-100 text-zinc-950 rounded-lg overflow-hidden shadow-xl w-full">
            <div class="relative w-full px-1">
                <input type="text" placeholder="Search..." class="bg-zinc-100 w-full rounded-md block mx-auto my-1 pl-1 py-1 pr-8" />
                <div class="absolute top-0 right-0 bottom-0 pr-2 flex items-center">
                    <svg xmlns="http://www.w3.org/2000/svg" fill="none" viewBox="0 0 24 24" stroke-width="2" stroke="currentColor" class="w-6 h-6 mx-auto">
                        <path stroke-linecap="round" stroke-linejoin="round" d="M21 21l-5.197-5.197m0 0A7.5 7.5 0 105.196 5.196a7.5 7.5 0 0010.607 10.607z" />
                    </svg>
                </div>
            </div>
            <div class="w-full mx-auto my-1 border-t border-zinc-500/25"/>
            <div class="w-full px-2 pb-2">
                <ul class="match-results">
                    <li>
                        <search-result title="GitHub" url="https://github.com/a-poor"></search-result>
                    </li>
                    <li>
                        <search-result title="Blog" url="/blog" excerpt="Check out some of my blog posts!"></search-result>
                    </li>
                    <li>
                        <search-result title="About Me" url="/about" excerpt="Want to learn more about me?"></search-result>
                    </li>
                </ul>
            </div>
        </div>
    </div>
</search-modal>

<script>
    import algoliasearch from 'algoliasearch/lite';

    // Define config values...
    const ALGOLIA_APP_ID = "6JMPFP5Q5Q";
    const ALGOLIA_SEARCH_ONLY_API_KEY = "a72c924faecfd2dc137b114e029b7869";
    const BLOG_INDEX_NAME = "prod_blogs";
    
    // Init the client and index...
    const searchClient = algoliasearch(ALGOLIA_APP_ID, ALGOLIA_SEARCH_ONLY_API_KEY);
    const index = searchClient.initIndex(BLOG_INDEX_NAME);

    

    class SearchResult extends HTMLElement {
        static observedAttributes = ['title', 'url', 'excerpt', 'icon'];
        
        constructor() {
            super();
        }
        
        connectedCallback() {
            this.update();
        }

        attributeChangedCallback(name: string, oldValue: string, newValue: string) {
            console.log(`Changing attribute "${name}" from "${oldValue}" to "${newValue}"`);
            this.update();
        }

        update() {
            const title = this.getAttribute('title');
            const url = this.getAttribute('url');
            const excerpt = this.getAttribute('excerpt');
            const excerptStr = excerpt ? `<p class="text-sm">${excerpt}</p>` : "";
            this.innerHTML = `
                <a href="${url}" class="block px-2 py-1 hover:bg-zinc-500/25 rounded-md">
                    <h3 class="text-lg font-semibold">${title}</h3>
                    ${excerptStr}
                </a>
            `;
        }
    }
    customElements.define('search-result', SearchResult);


    class SearchModal extends HTMLElement {
        static observedAttributes = ['open'];

        constructor() {
            super();

            // Init props for this element...
            // this.setAttribute("open", "false"); // TODO - Uncomment me...

            // Add event listeners...
            this.onclick = () => {
                this.setAttribute("open", "false");
            }

            // Get the inner container...
            const contentBox = this.querySelector(".search-modal-box") as HTMLElement;

            // Add listeners to the content box...
            contentBox.onclick = (e) => {
                e.stopPropagation();
            }

            // Create hotkey listeners...
            document.addEventListener("keydown", (e) => {
                // If open, close on escape...
                if (this.isOpen() && e.key === "Escape") {
                    this.setAttribute("open", "false");
                    e.preventDefault();
                }

                // If closed, open on cmd/ctrl+k...
                if (!this.isOpen() && e.key === "k" && (e.metaKey || e.ctrlKey)) {
                    this.setAttribute("open", "true");
                    e.preventDefault();
                }
            });

            // Get the input...
            const searchInput = this.querySelector("input") as HTMLInputElement;
            searchInput.addEventListener("keydown", e => {
                if (e.key === "Enter") {
                    // e.preventDefault();
                    // e.stopPropagation();
                    console.log("Enter pressed!");
                    // TODO - Search for the query...
                }
            });
            searchInput.addEventListener("input", e => {
                console.log("Input changed!");
            });
        }

        isOpen() {
            return this.getAttribute("open") === "true";
        }

        openModal() {
            // Show the modal...
            this.classList.remove("hidden");
            this.classList.add("flex");

            // Prevent scrolling on the body...
            const bodyInner = document.querySelector("#body-inner");
            bodyInner?.classList.remove("overflow-scroll");
            bodyInner?.classList.add("overflow-clip");

            // Focus the search box...
            const searchBox = this.querySelector("input") as HTMLInputElement;
            searchBox.focus();
        }

        closeModal() {
            this.classList.add("hidden");
            this.classList.remove("flex");

            // Re-allow scrolling on the body...
            const bodyInner = document.querySelector("#body-inner");
            bodyInner?.classList.add("overflow-scroll");
            bodyInner?.classList.remove("overflow-clip");
        }

        attributeChangedCallback(name: string, oldValue: string, newValue: string) {
            console.log(`Changing attribute "${name}" from "${oldValue}" to "${newValue}"`);
            if (name === "open" && newValue === "true") {
                this.openModal();
            }
            if (name === "open" && newValue === "false") {
                this.closeModal();
            }
        }
    }
    customElements.define('search-modal', SearchModal);

</script>
