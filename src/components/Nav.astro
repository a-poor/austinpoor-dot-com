---
export type Tab = "home" | "blog" | "projects" | "about";

interface Props {
  activeTab?: Tab;
}

const { activeTab }: Props = Astro.props;


interface TabData {
  key: Tab;
  name: string;
  href: string;
}

const tabs: TabData[] = [
  {
    key: "home",
    name: "Home",
    href: "/",
  },
  {
    key: "blog",
    name: "Blog",
    href: "/blog",
  },
  {
    key: "projects",
    name: "Projects",
    href: "/projects",
  },
  {
    key: "about",
    name: "About",
    href: "/about",
  },
];
---

<div class="flex max-w-7xl mx-auto px-2 py-4 align-middle items-stretch space-x-1 sm:space-x-2">
  <a href="/" class="pl-2 pr-3 py-1 flex items-center space-x-1 rounded-lg bg-zinc-800">
    <svg xmlns="http://www.w3.org/2000/svg" fill="none" viewBox="0 0 24 24" stroke-width="2" stroke="currentColor" class="w-8 h-8" width="32" height="32">
      <path stroke-linecap="round" stroke-linejoin="round" d="M6.75 7.5l3 2.25-3 2.25m4.5 0h3m-9 8.25h13.5A2.25 2.25 0 0021 18V6a2.25 2.25 0 00-2.25-2.25H5.25A2.25 2.25 0 003 6v12a2.25 2.25 0 002.25 2.25z" />
    </svg>
    <span class="font-sans text-2xl font-semibold pb-1">
      Austin Poor
    </span>
  </a>

  <div class="flex-grow" />

  <nav class="hidden md:block rounded-lg bg-zinc-800 hover:bg-zinc-700 py-1">
    <ul class="list-none flex space-x-2 place-items-center h-full px-2">
      {tabs.map(d => (
        <li class="px-1 pb-1.5">
          <a 
            href={d.href}
            class={"px-1 pb-0.5 border-b-2 " + (
              activeTab === d.key 
                ? "border-purple-500" 
                : "border-transparent hover:border-purple-700"
            )}
          >
            { d.name }
          </a>
        </li>
      ))}
    </ul>
  </nav>  

  <button id="toggle-search-modal" class="flex rounded-lg bg-zinc-800 hover:bg-zinc-700 active:bg-zinc-900 w-[44px] h-[44px] place-items-center">
    <svg xmlns="http://www.w3.org/2000/svg" fill="none" viewBox="0 0 24 24" stroke-width="2" stroke="currentColor" class="w-6 h-6 mx-auto">
      <path stroke-linecap="round" stroke-linejoin="round" d="M21 21l-5.197-5.197m0 0A7.5 7.5 0 105.196 5.196a7.5 7.5 0 0010.607 10.607z" />
    </svg>
  </button>
    
  <button
    id="toggle-mobile-nav-button" 
    class="flex md:hidden rounded-lg bg-zinc-800 hover:bg-zinc-700 active:bg-zinc-900 place-items-center w-[44px] h-[44px]"
    data-open="false"
  >
    <svg xmlns="http://www.w3.org/2000/svg" fill="none" viewBox="0 0 24 24" stroke-width="2" stroke="currentColor" class="nav-open w-6 h-6 mx-auto">
      <path stroke-linecap="round" stroke-linejoin="round" d="M3.75 6.75h16.5M3.75 12h16.5m-16.5 5.25h16.5" />
    </svg>
    <svg xmlns="http://www.w3.org/2000/svg" fill="none" viewBox="0 0 24 24" stroke-width="2" stroke="currentColor" class="nav-close w-6 h-6 mx-auto hidden">
      <path stroke-linecap="round" stroke-linejoin="round" d="M6 18L18 6M6 6l12 12" />
    </svg>
  </button>
</div>

<div id="mobile-nav" class="hidden md:hidden overflow-hidden">
  <ul class="list-none space-y-4 px-4 py-5 mb-4 bg-zinc-800 z-10 w-full">
    {tabs.map(d => (
      <li>
        <a 
          href={d.href}
          class={"px-1 pb-0.5 border-b-2 " + (
            activeTab === d.key 
              ? "border-purple-500" 
              : "border-transparent hover:border-purple-700"
          )}
        >
          { d.name }
        </a>
      </li>
    ))}
  </ul>
</div>

<script>
  //@ts-ignore
  import { animate } from 'motion';

  // Get the elements we need...
  const toggleMobileNav = document.getElementById("toggle-mobile-nav-button");
  const navOpenIcon = toggleMobileNav?.querySelector(".nav-open");
  const navCloseIcon = toggleMobileNav?.querySelector(".nav-close");
  const mobileNav = document.getElementById("mobile-nav");
  const searchButton = document.getElementById("toggle-search-modal");

  // Add the event listener to the mobile nav toggle button...
  toggleMobileNav?.addEventListener("click", async () => {
    if (!toggleMobileNav) return;
    if (!navOpenIcon) return;
    if (!navCloseIcon) return;
    if (!mobileNav) return;

    if (toggleMobileNav.dataset.open !== "true") {
      // Mark the nav as open...
      toggleMobileNav.dataset.open = "true";

      // Swap the icons...
      navOpenIcon?.classList.toggle("hidden");
      navCloseIcon?.classList.toggle("hidden");
      animate(
        navOpenIcon, 
        { opacity: [1, 0, 0] }, 
        { duration: 0.1 },
      )
      animate(
        navCloseIcon, 
        { opacity: [0, 0, 1] }, 
        { duration: 0.1 },
      );

      // Unhide it and get it's height...
      mobileNav?.classList.remove("hidden");
      const height = mobileNav?.scrollHeight;

      // Start animating the height up from zero...
      await animate(mobileNav, { height: [0, `${height}px`] }, { duration: 0.2 }).finished;
    } else {
      // Get the height of the nav...
      const height = mobileNav?.scrollHeight;

      // Swap the icons...
      navOpenIcon?.classList.toggle("hidden");
      navCloseIcon?.classList.toggle("hidden");
      animate(
        navCloseIcon, 
        { opacity: [1, 0, 0] }, 
        { duration: 0.1 },
      )
      animate(
      navOpenIcon, 
        { opacity: [0, 0, 1] }, 
        { duration: 0.1 },
      );

      // Mark the nav as closed...
      toggleMobileNav.dataset.open = "false";
      
      // Animate the height back down to zero...
      await animate(mobileNav, { height: [`${height}px`, 0] }, { duration: 0.2 }).finished;
      mobileNav?.classList.add("hidden");
    }
  });

  // Add the event listener to the search button...
  searchButton?.addEventListener("click", () => {
    console.log("Search button clicked!");
  });
</script>
